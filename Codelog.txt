src/
├── App.jsx
├── main.jsx
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./index.css";
import { AuthProvider } from "./context/AuthContext.jsx";
import AppRoutes from "./routes.jsx";

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <AuthProvider>
      <AppRoutes />
    </AuthProvider>
  </StrictMode>
);
├── context/
│   └── AuthContext.jsx
import { createContext, useContext, useState } from "react";

const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null); // { role: "admin" | "user" }

  const login = (role) => setUser({ role });
  const logout = () => setUser(null);

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  return useContext(AuthContext);
}
├── services/
│   └── api.js (placeholders)
├── components/
│   ├── layouts/
│   │   ├── LoginLayout.jsx
import { Outlet } from "react-router-dom";

export default function LoginLayout() {
  return (
    <div style={{ maxWidth: 400, margin: "auto", padding: 32 }}>
      <h2>Login Portal</h2>
      <Outlet />
    </div>
  );
}
│   │   └── DashboardLayout.jsx
import { Outlet, useNavigate } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";

export default function DashboardLayout() {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  return (
    <div>
      <header style={{ display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16, background: "#eee" }}>
        <span>Dashboard ({user?.role})</span>
        <button onClick={handleLogout}>Logout</button>
      </header>
      <main style={{ padding: 24 }}>
        <Outlet />
      </main>
    </div>
  );
}
│   ├── forms/
│   │   ├── AddStudentForm.jsx
import { useState } from "react";

export default function AddStudentForm() {
  const [showMsg, setShowMsg] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();
    // Dummy: Show success, reset form
    setShowMsg(true);
    setTimeout(() => setShowMsg(false), 1500);
    // TODO: Wire to backend POST /student
  };

  return (
    <form onSubmit={handleSubmit}>
      <h3>Add Student</h3>
      <input placeholder="USN" required />
      <input placeholder="Name" required />
      <input placeholder="Semester" required />
      <button type="submit">Add Student</button>
      {showMsg && <div style={{ color: "green" }}>Student added!</div>}
    </form>
  );
}
│   │   ├── AddSubjectForm.jsx
import { useState } from "react";

export default function AddSubjectForm() {
  const [showMsg, setShowMsg] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();
    setShowMsg(true);
    setTimeout(() => setShowMsg(false), 1500);
    // TODO: Wire to backend POST /subject
  };

  return (
    <form onSubmit={handleSubmit}>
      <h3>Add Subject</h3>
      <input placeholder="Subject Code" required />
      <input placeholder="Subject Name" required />
      <button type="submit">Add Subject</button>
      {showMsg && <div style={{ color: "green" }}>Subject added!</div>}
    </form>
  );
}
│   │   ├── AddFacultyForm.jsx
import { useState } from "react";

export default function AddFacultyForm() {
  const [showMsg, setShowMsg] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();
    setShowMsg(true);
    setTimeout(() => setShowMsg(false), 1500);
    // TODO: Wire to backend POST /faculty
  };

  return (
    <form onSubmit={handleSubmit}>
      <h3>Add Faculty</h3>
      <input placeholder="Faculty Code" required />
      <input placeholder="Faculty Name" required />
      <button type="submit">Add Faculty</button>
      {showMsg && <div style={{ color: "green" }}>Faculty added!</div>}
    </form>
  );
}
│   │   └── AssociateFacultySubject.jsx
import { useState } from "react";

export default function AssociateFacultySubject() {
  const [showMsg, setShowMsg] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();
    setShowMsg(true);
    setTimeout(() => setShowMsg(false), 1500);
    // TODO: Wire to backend GET/POST for association
  };

  return (
    <form onSubmit={handleSubmit}>
      <h3>Associate Faculty to Subject</h3>
      <input placeholder="Faculty Code" required />
      <input placeholder="Subject Code" required />
      <button type="submit">Associate</button>
      {showMsg && <div style={{ color: "green" }}>Association done!</div>}
    </form>
  );
}
│   └── pages/
│       ├── LoginPage.jsx
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";

export default function LoginPage() {
  const [role, setRole] = useState("admin");
  const [name, setName] = useState("");
  const [password, setPassword] = useState("");
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();
    // Dummy login: just set role, ignore credentials
    login(role);
    navigate("/dashboard");
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>
          Login as:
          <select value={role} onChange={e => setRole(e.target.value)}>
            <option value="admin">Admin</option>
            <option value="user">User</option>
          </select>
        </label>
      </div>
      <div>
        <input
          placeholder={role === "admin" ? "Admin Name" : "User Name"}
          value={name}
          onChange={e => setName(e.target.value)}
        />
      </div>
      <div>
        <input
          placeholder="Password"
          type="password"
          value={password}
          onChange={e => setPassword(e.target.value)}
        />
      </div>
      <button type="submit">Login</button>
      {/* Dummy: No validation, no backend call */}
    </form>
  );
}
│       ├── AdminDashboard.jsx
import { useState } from "react";
import AddStudentForm from "../forms/AddStudentForm";
import AddSubjectForm from "../forms/AddSubjectForm";
import AddFacultyForm from "../forms/AddFacultyForm";
import AssociateFacultySubject from "../forms/AssociateFacultySubject";

export default function AdminDashboard() {
  const [tab, setTab] = useState("student");

  return (
    <div>
      <nav style={{ marginBottom: 16 }}>
        <button onClick={() => setTab("student")}>Add Student</button>
        <button onClick={() => setTab("subject")}>Add Subject</button>
        <button onClick={() => setTab("faculty")}>Add Faculty</button>
        <button onClick={() => setTab("associate")}>Associate Faculty</button>
      </nav>
      <div>
        {tab === "student" && <AddStudentForm />}
        {tab === "subject" && <AddSubjectForm />}
        {tab === "faculty" && <AddFacultyForm />}
        {tab === "associate" && <AssociateFacultySubject />}
      </div>
    </div>
  );
}
│       ├── UserDashboard.jsx
export default function UserDashboard() {
  // Dummy: Replace with actual student/subject list from backend later
  return (
    <div>
      <h2>User Dashboard</h2>
      <p>View Students and Subjects (dummy data)</p>
      <ul>
        <li>Student: Alice (Semester 1)</li>
        <li>Student: Bob (Semester 2)</li>
      </ul>
      <ul>
        <li>Subject: Math 101</li>
        <li>Subject: Physics 201</li>
      </ul>
      {/* TODO: Replace with real data from backend */}
    </div>
  );
}
│       └── NotFound.jsx
export default function NotFound() {
  return <h2>404 - Page Not Found</h2>;
}
└── routes.jsx
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import { useAuth } from "./context/AuthContext";
import LoginLayout from "./components/layouts/LoginLayout.jsx";
import DashboardLayout from "./components/layouts/DashboardLayout.jsx";
import LoginPage from "./components/pages/LoginPage.jsx";
import AdminDashboard from "./components/pages/AdminDashboard.jsx";
import UserDashboard from "./components/pages/UserDashboard.jsx";
import NotFound from "./components/pages/NotFound.jsx";

function ProtectedRoute({ children, role }) {
  const { user } = useAuth();
  if (!user) return <Navigate to="/login" />;
  if (role && user.role !== role) return <Navigate to="/" />;
  return children;
}

export default function AppRoutes() {
  return (
    <BrowserRouter>
      <Routes>
        <Route element={<LoginLayout />}>
          <Route path="/login" element={<LoginPage />} />
        </Route>
        <Route
          element={
            <ProtectedRoute>
              <DashboardLayout />
            </ProtectedRoute>
          }
        >
          <Route path="/" element={<Navigate to="/dashboard" />} />
          <Route
            path="/dashboard"
            element={
              <ProtectedRoute>
                <DashboardSelector />
              </ProtectedRoute>
            }
          />
        </Route>
        <Route path="*" element={<NotFound />} />
      </Routes>
    </BrowserRouter>
  );
}

// Renders dashboard based on role
function DashboardSelector() {
  const { user } = useAuth();
  if (user?.role === "admin") return <AdminDashboard />;
  if (user?.role === "user") return <UserDashboard />;
  return <Navigate to="/login" />;
}
